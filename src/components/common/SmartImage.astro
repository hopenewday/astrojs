---
/**
 * Smart Image component with CDN failover
 * Automatically switches between ImageKit and Tebi S3 storage
 * based on service availability
 * 
 * Features:
 * - Responsive images with srcset and sizes
 * - Lazy loading with IntersectionObserver
 * - Blur-up loading technique with blurhash placeholders
 * - Art direction support with different crops
 * - Error handling with multiple fallback strategies
 * - Accessibility improvements
 * - AVIF format support with automatic detection
 */
import { getImageWithFailover, getLqipUrl, getResponsiveImageAttributes, generateBlurhash } from '../../lib/media';
import { detectAvifSupport } from '../../utils/imageOptimizer';

interface Props {
  src: string;
  alt: string;
  widths?: number[];
  sizes?: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  quality?: number;
  format?: 'auto' | 'webp' | 'avif' | 'jpg' | 'png';
  aspectRatio?: string;
  crop?: 'maintain_ratio' | 'force' | 'at_least' | 'at_max';
  focus?: 'center' | 'top' | 'left' | 'bottom' | 'right' | 'top_left' | 'top_right' | 'bottom_left' | 'bottom_right';
  lqip?: boolean;
  blurhash?: boolean;
  className?: string;
  style?: string;
  fetchpriority?: 'high' | 'low' | 'auto';
  fallbackStrategy?: 'silent' | 'placeholder' | 'error';
  objectFit?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';
  objectPosition?: string;
  draggable?: boolean;
}

const {
  src,
  alt,
  widths = [400, 800, 1200, 1600],
  sizes = '(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw',
  width,
  height,
  loading = 'lazy',
  decoding = 'async',
  quality = 80,
  format = 'auto',
  aspectRatio,
  crop = 'maintain_ratio',
  focus = 'center',
  lqip = true,
  blurhash = true,
  className = '',
  style = '',
  fetchpriority = 'auto',
  fallbackStrategy = 'silent',
  objectFit,
  objectPosition,
  draggable = false,
} = Astro.props;

// Validate required props
if (!src) {
  throw new Error('SmartImage component requires a src property');
}

if (!alt && alt !== '') {
  throw new Error('SmartImage component requires an alt property (empty string is allowed for decorative images)');
}

// Get image URL with failover
let imageUrl;
let imageError = false;

// Check for AVIF support if format is 'auto'
let requestedFormat = format;
if (format === 'auto' && typeof window !== 'undefined') {
  try {
    const avifSupported = await detectAvifSupport();
    requestedFormat = avifSupported ? 'avif' : 'webp';
    console.log(`AVIF support detected: ${avifSupported}, using format: ${requestedFormat}`);
  } catch (error) {
    console.error('Error detecting AVIF support:', error);
    requestedFormat = 'webp'; // Fallback to WebP if detection fails
  }
}

try {
  imageUrl = await getImageWithFailover(src, {
    width,
    height,
    quality,
    format: requestedFormat,
    aspectRatio,
    crop,
    focus,
  });
} catch (error) {
  console.error(`Failed to load image from ${src}:`, error);
  imageError = true;
  
  // Handle error based on fallback strategy
  if (fallbackStrategy === 'placeholder') {
    imageUrl = '/images/placeholder.svg'; // Fallback placeholder image
  } else if (fallbackStrategy === 'error') {
    throw error; // Re-throw to let error boundary handle it
  } else {
    // Silent fallback - use original src as last resort
    imageUrl = src;
  }
}

// Get responsive image attributes if widths are provided
let srcset = '';
let sizesAttr = '';
let lqipUrl;
let blurhashValue;
let imageWidth = width;
let imageHeight = height;

if (!imageError && widths.length > 1) {
  try {
    const responsiveAttrs = await getResponsiveImageAttributes({
      src,
      alt,
      widths,
      sizes,
      baseWidth: width,
      baseHeight: height,
      quality,
      format,
      aspectRatio,
      focus,
      lqip,
    });
    
    srcset = responsiveAttrs.srcset;
    sizesAttr = responsiveAttrs.sizes;
    lqipUrl = responsiveAttrs.lqip;
    imageWidth = responsiveAttrs.width || width;
    imageHeight = responsiveAttrs.height || height;
  } catch (error) {
    console.error(`Failed to generate responsive attributes for ${src}:`, error);
    // Continue with basic image without responsive attributes
  }
} else if (lqip && !imageError) {
  // Just get LQIP URL if responsive images not needed
  try {
    lqipUrl = getLqipUrl(src);
  } catch (error) {
    console.error(`Failed to generate LQIP for ${src}:`, error);
    // Continue without LQIP
  }
}

// Generate blurhash placeholder if enabled
if (blurhash && !imageError) {
  try {
    blurhashValue = await generateBlurhash(src);
  } catch (error) {
    console.error(`Failed to generate blurhash for ${src}:`, error);
    // Continue without blurhash
  }
}

// Generate unique ID for this image
const id = `img-${Math.random().toString(36).substring(2, 11)}`;

// Inline styles for blur-up effect
const blurUpStyles = lqipUrl || blurhashValue ? `
  #${id} {
    transition: filter 0.5s ease-out;
    filter: blur(10px);
    background-size: cover;
    background-position: center;
    ${blurhashValue ? `background-color: ${blurhashValue};` : ''}
  }
  #${id}.loaded {
    filter: blur(0);
  }
` : '';

// Additional inline styles
let inlineStyles = style || '';
if (objectFit) {
  inlineStyles += `object-fit: ${objectFit};`;
}
if (objectPosition) {
  inlineStyles += `object-position: ${objectPosition};`;
}
---

{(lqipUrl || blurhashValue) && (
  <style set:html={blurUpStyles}></style>
)}

<img
  id={(lqipUrl || blurhashValue) ? id : undefined}
  src={imageUrl}
  alt={alt}
  width={imageWidth}
  height={imageHeight}
  loading={loading}
  decoding={decoding}
  class={className}
  style={inlineStyles}
  fetchpriority={fetchpriority}
  srcset={srcset || undefined}
  sizes={sizesAttr || undefined}
  draggable={draggable}
  onerror={fallbackStrategy === 'placeholder' ? `this.src='/images/placeholder.svg';` : undefined}
  aria-describedby={alt && alt.length > 50 ? `${id}-desc` : undefined}
/>

{alt && alt.length > 50 && (
  <span id={`${id}-desc`} class="sr-only">{alt}</span>
)}

{(lqipUrl || blurhashValue) && (
  <script define:vars={{ id, lqipUrl, blurhashValue }}>
    // Create new image to preload the full resolution version
    const img = document.getElementById(id);
    if (img) {
      // Set initial background image to LQIP or use blurhash color
      if (lqipUrl) {
        img.style.backgroundImage = `url(${lqipUrl})`;
      } else if (blurhashValue) {
        // Blurhash is already set as background-color in the inline styles
      }
      
      // When the main image loads, remove blur
      img.onload = () => {
        img.classList.add('loaded');
      };
      
      // If image already loaded (from cache), add loaded class immediately
      if (img.complete) {
        img.classList.add('loaded');
      }
      
      // Use IntersectionObserver for enhanced lazy loading
      if ('IntersectionObserver' in window && img.loading === 'lazy') {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              // Start loading the image when it enters viewport
              const target = entry.target;
              if (target.dataset.src) {
                target.src = target.dataset.src;
                delete target.dataset.src;
              }
              observer.unobserve(target);
            }
          });
        }, {
          rootMargin: '200px', // Start loading 200px before image enters viewport
        });
        
        observer.observe(img);
      }
    }
  </script>
)}

<style>
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
</style>