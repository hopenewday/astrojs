---
/**
 * OptimizedImage Component
 * 
 * A high-performance image component that uses web workers to offload
 * image processing tasks from the main thread.
 */

import { generateBlurhashWithWorker } from '../../utils/imageWorkerIntegration';
import { getImageKitUrl } from '../../utils/imageHelpers';

interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  sizes?: string;
  quality?: number;
  format?: 'auto' | 'webp' | 'avif' | 'jpg' | 'png';
  blurhash?: boolean;
  priority?: boolean;
}

const {
  src,
  alt,
  width,
  height,
  class: className = '',
  loading = 'lazy',
  decoding = 'async',
  sizes = '100vw',
  quality = 80,
  format = 'auto',
  blurhash = true,
  priority = false
} = Astro.props;

// Generate a blurhash placeholder using web worker
let placeholder = '';
if (blurhash) {
  try {
    // Use the web worker to generate the blurhash
    // This offloads the CPU-intensive task from the main thread
    placeholder = await generateBlurhashWithWorker(src, {
      width: 32,
      height: 32,
      componentX: 4,
      componentY: 3
    });
  } catch (error) {
    console.error('Failed to generate blurhash:', error);
  }
}

// Generate responsive image URLs
const breakpoints = [640, 768, 1024, 1280, 1536];
const srcset = breakpoints
  .filter(bp => !width || bp <= width * 2) // Don't generate sizes larger than 2x the display size
  .map(bp => {
    const url = getImageKitUrl(src, {
      width: bp,
      quality,
      format
    });
    return `${url} ${bp}w`;
  })
  .join(', ');

// Generate the main image URL
const imageUrl = getImageKitUrl(src, {
  width,
  height,
  quality,
  format
});

// Set appropriate loading attribute based on priority
const loadingAttr = priority ? 'eager' : loading;

// Set fetchpriority attribute for high-priority images
const fetchPriority = priority ? 'high' : 'auto';
---

<div class={`optimized-image-container ${className}`}>
  {placeholder && (
    <div class="placeholder" data-blurhash={placeholder}></div>
  )}
  <img
    src={imageUrl}
    alt={alt}
    width={width}
    height={height}
    loading={loadingAttr}
    decoding={decoding}
    srcset={srcset}
    sizes={sizes}
    fetchpriority={fetchPriority}
    class="optimized-image"
    onload="this.parentNode.classList.add('loaded')"
  />
</div>

<style>
  .optimized-image-container {
    position: relative;
    overflow: hidden;
    background-color: #f0f0f0;
    width: 100%;
  }
  
  .optimized-image {
    display: block;
    width: 100%;
    height: auto;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }
  
  .placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center;
    transition: opacity 0.3s ease-in-out;
  }
  
  .loaded .optimized-image {
    opacity: 1;
  }
  
  .loaded .placeholder {
    opacity: 0;
  }
</style>

<script>
  // Client-side script to decode blurhash placeholders
  import { decode } from 'blurhash';
  
  // Function to convert blurhash to CSS background
  function decodeBlurhash(blurhash, width, height) {
    try {
      // Decode the blurhash
      const pixels = decode(blurhash, width, height);
      
      // Create a canvas to draw the pixels
      const canvas = document.createElement('canvas');
      canvas.width = width;
      canvas.height = height;
      
      // Get the canvas context and create an ImageData object
      const ctx = canvas.getContext('2d');
      const imageData = ctx.createImageData(width, height);
      
      // Set the pixels
      for (let i = 0; i < pixels.length; i++) {
        imageData.data[i] = pixels[i];
      }
      
      // Draw the image data to the canvas
      ctx.putImageData(imageData, 0, 0);
      
      // Return the canvas data URL
      return canvas.toDataURL('image/png');
    } catch (error) {
      console.error('Failed to decode blurhash:', error);
      return null;
    }
  }
  
  // Find all placeholder elements and apply blurhash backgrounds
  function applyBlurhashPlaceholders() {
    const placeholders = document.querySelectorAll('.placeholder[data-blurhash]');
    
    placeholders.forEach(placeholder => {
      const blurhash = placeholder.getAttribute('data-blurhash');
      if (!blurhash) return;
      
      // Use a web worker for decoding if available
      if (window.Worker) {
        // Create a worker for blurhash decoding
        const worker = new Worker('/workers/main-worker.js');
        
        // Send the blurhash to the worker
        worker.postMessage({
          id: Math.random().toString(36).substring(2, 11),
          type: 'generateBlurhash',
          payload: {
            blurhash,
            width: 32,
            height: 32
          }
        });
        
        // Handle the worker response
        worker.onmessage = event => {
          const response = event.data;
          if (response.type === 'success') {
            // Apply the background image
            placeholder.style.backgroundImage = `url(${response.payload})`;
            
            // Terminate the worker
            worker.terminate();
          }
        };
      } else {
        // Fall back to main thread decoding
        const dataUrl = decodeBlurhash(blurhash, 32, 32);
        if (dataUrl) {
          placeholder.style.backgroundImage = `url(${dataUrl})`;
        }
      }
    });
  }
  
  // Apply blurhash placeholders when the DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', applyBlurhashPlaceholders);
  } else {
    applyBlurhashPlaceholders();
  }
  
  // Apply blurhash placeholders when new content is added to the DOM
  // This is useful for client-side navigation in SPA-like sites
  const observer = new MutationObserver(mutations => {
    mutations.forEach(mutation => {
      if (mutation.addedNodes.length) {
        applyBlurhashPlaceholders();
      }
    });
  });
  
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
</script>