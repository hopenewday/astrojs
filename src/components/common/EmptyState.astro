---
/**
 * EmptyState Component
 * 
 * A component that displays an engaging Lottie animation for empty states,
 * such as empty search results, no items in a list, or filtered content with no matches.
 */

import { initLottieAnimation } from '../../utils/animations';

interface Props {
  /** Title text for the empty state */
  title: string;
  /** Description text explaining the empty state */
  description?: string;
  /** Type of empty state animation to display */
  type?: 'search' | 'list' | 'filter' | 'error' | 'custom';
  /** URL to custom Lottie JSON file (required if type is 'custom') */
  customAnimation?: string;
  /** Width of the animation container */
  width?: number | string;
  /** Height of the animation container */
  height?: number | string;
  /** CSS class to apply to the container */
  class?: string;
  /** Whether to show an action button */
  showAction?: boolean;
  /** Text for the action button */
  actionText?: string;
  /** URL for the action button */
  actionUrl?: string;
}

const {
  title,
  description,
  type = 'list',
  customAnimation,
  width = '200px',
  height = '200px',
  class: className = '',
  showAction = false,
  actionText = 'Go Back',
  actionUrl = '#'
} = Astro.props;

// Map of default empty state animations by type
const defaultAnimations = {
  search: 'https://assets9.lottiefiles.com/packages/lf20_buhby0ug.json',
  list: 'https://assets7.lottiefiles.com/packages/lf20_ymbzgxgf.json',
  filter: 'https://assets4.lottiefiles.com/packages/lf20_qm8ufqws.json',
  error: 'https://assets2.lottiefiles.com/packages/lf20_ghfpce1h.json'
};

// Determine the animation source
const animationSrc = customAnimation || defaultAnimations[type] || defaultAnimations.list;

// Generate a unique ID for the animation container
const animationId = `empty-state-${Math.random().toString(36).substring(2, 11)}`;

// Set dimensions with units if they're numbers
const widthStyle = typeof width === 'number' ? `${width}px` : width;
const heightStyle = typeof height === 'number' ? `${height}px` : height;
---

<div class={`empty-state ${type}-empty-state ${className}`}>
  <div 
    id={animationId} 
    class="empty-state-animation"
    style={`width: ${widthStyle}; height: ${heightStyle};`}
    data-animation-src={animationSrc}
  ></div>
  
  <h3 class="empty-state-title">{title}</h3>
  
  {description && (
    <p class="empty-state-description">{description}</p>
  )}
  
  {showAction && (
    <a href={actionUrl} class="empty-state-action">{actionText}</a>
  )}
</div>

<style>
  .empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    text-align: center;
    max-width: 100%;
  }
  
  .empty-state-animation {
    margin-bottom: 1.5rem;
  }
  
  .empty-state-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: #374151;
  }
  
  .empty-state-description {
    font-size: 1rem;
    color: #6b7280;
    margin-bottom: 1.5rem;
    max-width: 32rem;
  }
  
  .empty-state-action {
    display: inline-block;
    padding: 0.5rem 1rem;
    background-color: #4f46e5;
    color: white;
    border-radius: 0.375rem;
    font-weight: 500;
    text-decoration: none;
    transition: background-color 0.2s;
  }
  
  .empty-state-action:hover {
    background-color: #4338ca;
  }
  
  /* Dark mode styles */
  :global(.dark) .empty-state-title {
    color: #e5e7eb;
  }
  
  :global(.dark) .empty-state-description {
    color: #9ca3af;
  }
</style>

<script>
  import { initLottieAnimation } from '../../utils/animations';
  
  // Initialize all empty state animations on the page
  function initEmptyStateAnimations() {
    const animationElements = document.querySelectorAll('.empty-state-animation');
    
    animationElements.forEach(async (element) => {
      const id = element.id;
      const src = element.getAttribute('data-animation-src');
      
      if (id && src) {
        try {
          // Initialize the Lottie animation
          await initLottieAnimation(id, src, {
            loop: true,
            autoplay: true,
            renderer: 'svg'
          });
        } catch (error) {
          console.error('Failed to initialize empty state animation:', error);
        }
      }
    });
  }
  
  // Initialize animations when the DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initEmptyStateAnimations);
  } else {
    initEmptyStateAnimations();
  }
  
  // Initialize animations when new content is added to the DOM
  const observer = new MutationObserver(mutations => {
    mutations.forEach(mutation => {
      if (mutation.addedNodes.length) {
        initEmptyStateAnimations();
      }
    });
  });
  
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
</script>