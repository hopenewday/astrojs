---
/**
 * VideoPlayer Component
 * A responsive video player component that supports various video formats
 * and provides controls, autoplay options, and responsive sizing.
 */

interface Props {
  src: string;
  poster?: string;
  title?: string;
  autoplay?: boolean;
  muted?: boolean;
  controls?: boolean;
  loop?: boolean;
  width?: number;
  height?: number;
  className?: string;
  preload?: 'auto' | 'metadata' | 'none';
  aspectRatio?: string;
  allowFullscreen?: boolean;
  playsinline?: boolean;
  objectFit?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';
}

const {
  src,
  poster,
  title,
  autoplay = false,
  muted = false,
  controls = true,
  loop = false,
  width = 1280,
  height = 720,
  className = '',
  preload = 'metadata',
  aspectRatio = '16/9',
  allowFullscreen = true,
  playsinline = true,
  objectFit = 'cover'
} = Astro.props;

// Calculate aspect ratio for responsive container
const aspectRatioStyle = aspectRatio ? `aspect-ratio: ${aspectRatio};` : '';

// Determine video type from src extension
const getVideoType = (src: string) => {
  const extension = src.split('.').pop()?.toLowerCase();
  switch (extension) {
    case 'mp4':
      return 'video/mp4';
    case 'webm':
      return 'video/webm';
    case 'ogg':
      return 'video/ogg';
    case 'mov':
      return 'video/quicktime';
    case 'm3u8':
      return 'application/x-mpegURL';
    case 'mpd':
      return 'application/dash+xml';
    default:
      return 'video/mp4';
  }
};

const videoType = getVideoType(src);

// Generate a unique ID for this video player instance
const videoId = `video-player-${Math.random().toString(36).substring(2, 11)}`;
---

<div class={`video-player-container ${className}`} style={aspectRatioStyle}>
  <video
    id={videoId}
    class="video-element"
    width={width}
    height={height}
    poster={poster}
    preload={preload}
    playsinline={playsinline}
    {autoplay}
    {muted}
    {controls}
    {loop}
  >
    <source src={src} type={videoType} />
    <p>Your browser doesn't support HTML5 video. Here is a <a href={src}>link to the video</a> instead.</p>
  </video>

  {!controls && (
    <div class="custom-controls">
      <button class="play-pause-btn" aria-label="Play video">
        <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="white" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="12" cy="12" r="10" fill="rgba(0,0,0,0.5)" stroke="none"></circle>
          <polygon points="10 8 16 12 10 16 10 8" fill="white" stroke="none"></polygon>
        </svg>
      </button>
    </div>
  )}
</div>

<style>
  .video-player-container {
    position: relative;
    width: 100%;
    height: auto;
    overflow: hidden;
    background-color: #000;
    border-radius: 0.375rem;
  }

  .video-element {
    width: 100%;
    height: 100%;
    object-fit: var(--object-fit, cover);
  }

  .custom-controls {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.2);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .video-player-container:hover .custom-controls {
    opacity: 1;
  }

  .play-pause-btn {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.2s ease;
  }

  .play-pause-btn:hover {
    transform: scale(1.1);
  }
</style>

<script define:vars={{ videoId, objectFit }}>
  // Set up the video player when the DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const videoElement = document.getElementById(videoId);
    if (!videoElement) return;
    
    // Set object-fit property via CSS variable
    videoElement.style.setProperty('--object-fit', objectFit);
    
    // Set up custom controls if they exist
    const container = videoElement.closest('.video-player-container');
    const customControls = container?.querySelector('.custom-controls');
    const playPauseBtn = customControls?.querySelector('.play-pause-btn');
    
    if (playPauseBtn && videoElement) {
      playPauseBtn.addEventListener('click', () => {
        if (videoElement.paused) {
          videoElement.play();
          // Update button to show pause icon
          playPauseBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="white" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="12" cy="12" r="10" fill="rgba(0,0,0,0.5)" stroke="none"></circle>
              <line x1="10" y1="8" x2="10" y2="16" stroke="white" stroke-width="2"></line>
              <line x1="14" y1="8" x2="14" y2="16" stroke="white" stroke-width="2"></line>
            </svg>
          `;
        } else {
          videoElement.pause();
          // Update button to show play icon
          playPauseBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="white" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="12" cy="12" r="10" fill="rgba(0,0,0,0.5)" stroke="none"></circle>
              <polygon points="10 8 16 12 10 16 10 8" fill="white" stroke="none"></polygon>
            </svg>
          `;
        }
      });
    }
    
    // Handle video end event
    videoElement.addEventListener('ended', () => {
      if (playPauseBtn) {
        // Reset to play button when video ends
        playPauseBtn.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="white" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="12" cy="12" r="10" fill="rgba(0,0,0,0.5)" stroke="none"></circle>
            <polygon points="10 8 16 12 10 16 10 8" fill="white" stroke="none"></polygon>
          </svg>
        `;
      }
    });
  });
</script>