---
/**
 * Responsive Image component with CDN failover
 * Provides responsive images with srcset and sizes attributes
 * Automatically switches between ImageKit and Tebi S3 storage
 * based on service availability
 * 
 * Features:
 * - Responsive images with srcset and sizes
 * - Automatic CDN failover
 * - Optimized image loading with Core Web Vitals optimizations
 * - AVIF format support with automatic detection
 * - Cloudflare image optimization integration
 * - CDN health monitoring
 * - Improved lazy loading for better LCP and CLS metrics
 * - Automatic priority based on viewport position
 */
import { getResponsiveImageAttributes } from '../../lib/media';
import { detectAvifSupport } from '../../utils/imageOptimizer';
import { getCdnHealthStatus } from '../../utils/imageOptimizer';
import { avifDetectionImage } from '../../lib/image-utils';

interface Props {
  src: string;
  alt: string;
  widths: number[];
  sizes: string;
  baseWidth?: number;
  baseHeight?: number;
  className?: string;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  aspectRatio?: string;
  quality?: number;
  format?: 'auto' | 'webp' | 'avif' | 'jpg' | 'png';
  focus?: 'center' | 'top' | 'left' | 'bottom' | 'right' | 'top_left' | 'top_right' | 'bottom_left' | 'bottom_right';
  lqip?: boolean;
  fetchpriority?: 'high' | 'low' | 'auto';
  isAboveTheFold?: boolean;
  intersectionMargin?: string;
  lazyLoadThreshold?: number;
}

const {
  src,
  alt,
  widths,
  sizes,
  baseWidth,
  baseHeight,
  className = '',
  loading = 'lazy',
  decoding = 'async',
  aspectRatio,
  quality = 80,
  format = 'auto',
  focus = 'center',
  lqip = true,
  fetchpriority = 'auto',
  isAboveTheFold = false,
  intersectionMargin = '200px',
  lazyLoadThreshold = 0.1,
} = Astro.props;

// Automatically set loading and fetchpriority based on position
// This improves LCP (Largest Contentful Paint) for above-the-fold images
const effectiveLoading = isAboveTheFold ? 'eager' : loading;
const effectiveFetchPriority = isAboveTheFold ? 'high' : fetchpriority;

// Check for AVIF support if format is 'auto'
let requestedFormat = format;

// Client-side AVIF detection
if (format === 'auto') {
  // Server-side initial format selection based on user agent
  // This is just a first guess, client-side detection will override if available
  const userAgent = Astro.request.headers.get('user-agent') || '';
  const isModernBrowser = userAgent.includes('Chrome') || userAgent.includes('Firefox') || userAgent.includes('Safari') && !userAgent.includes('Chrome') && parseInt(userAgent.match(/Version\/(\d+)/)?.[1] || '0', 10) >= 15;
  
  // Import the detectAvifSupport function from imageFormatDetection
  import { detectAvifSupport } from '../../utils/imageFormatDetection';
  
  // Try to detect AVIF support on the server side
  // This will be refined by client-side detection
  requestedFormat = isModernBrowser ? 'avif' : 'webp';
}

// Add client-side detection script if format is auto
const needsClientDetection = format === 'auto';

// Generate unique ID for AVIF detection if needed
const detectionId = needsClientDetection ? `avif-detect-${Math.random().toString(36).substring(2, 11)}` : undefined;

// Get responsive image attributes with automatic CDN failover
const {
  src: imageSrc,
  srcset,
  sizes: sizesAttr,
  lqip: lqipUrl,
  width: imageWidth,
  height: imageHeight,
} = await getResponsiveImageAttributes({
  src,
  alt,
  widths,
  sizes,
  baseWidth,
  baseHeight,
  quality,
  format: requestedFormat,
  aspectRatio,
  focus,
  lqip,
});

// Generate unique ID for this image if using LQIP
const id = lqipUrl ? `img-${Math.random().toString(36).substring(2, 11)}` : undefined;

// Inline styles for blur-up effect
const blurUpStyles = lqipUrl ? `
  #${id} {
    transition: filter 0.5s ease-out;
    filter: blur(10px);
  }
  #${id}.loaded {
    filter: blur(0);
  }
` : '';

// Add CSS for AVIF detection if needed
const avifDetectionStyles = needsClientDetection ? `
  /* Hide AVIF images by default until we know if they're supported */
  .avif-img {
    display: none;
  }
  
  /* Show AVIF images when support is detected */
  .avif-support .avif-img {
    display: block;
  }
  
  /* Hide WebP/fallback images when AVIF is supported */
  .avif-support .non-avif-img {
    display: none;
  }
  
  /* Show WebP/fallback images when AVIF is not supported */
  .no-avif-support .non-avif-img {
    display: block;
  }
` : '';
---

{lqipUrl && (
  <style set:html={blurUpStyles}></style>
)}

{needsClientDetection && (
  <style set:html={avifDetectionStyles}></style>
)}

{needsClientDetection && (
  <script define:vars={{ detectionId, avifDetectionImage }}>
    // Real AVIF detection implementation
    (function() {
      // Only run if we haven't already detected AVIF support
      if (localStorage.getItem('avif-support') === null) {
        const img = new Image();
        
        img.onload = function() {
          // AVIF is supported
          localStorage.setItem('avif-support', 'true');
          // Update any images that are waiting for format detection
          document.documentElement.classList.add('avif-support');
        };
        
        img.onerror = function() {
          // AVIF is not supported
          localStorage.setItem('avif-support', 'false');
          document.documentElement.classList.add('no-avif-support');
        };
        
        // Use the complete AVIF test image
        img.src = avifDetectionImage;
      } else {
        // We already know if AVIF is supported, add the appropriate class
        const isAvifSupported = localStorage.getItem('avif-support') === 'true';
        document.documentElement.classList.add(isAvifSupported ? 'avif-support' : 'no-avif-support');
      }
    })();
  </script>
)}

<img
  id={id}
  src={imageSrc}
  srcset={srcset}
  sizes={sizesAttr}
  alt={alt}
  class={className}
  loading={effectiveLoading}
  decoding={decoding}
  width={imageWidth}
  height={imageHeight}
  fetchpriority={effectiveFetchPriority}
  style={`content-visibility: ${isAboveTheFold ? 'visible' : 'auto'};`}
  data-above-fold={isAboveTheFold ? 'true' : 'false'}
/>

{lqipUrl && (
  <script define:vars={{ id, lqipUrl, isAboveTheFold, intersectionMargin, lazyLoadThreshold }}>
    // Create new image to preload the full resolution version
    const img = document.getElementById(id);
    if (img) {
      // Set initial background image to LQIP
      img.style.backgroundImage = `url(${lqipUrl})`;
      img.style.backgroundSize = 'cover';
      img.style.backgroundPosition = 'center';
      
      // When the main image loads, remove blur
      img.onload = () => {
        img.classList.add('loaded');
        // Report LCP if this is an above-the-fold image
        if (isAboveTheFold && window.performance && window.performance.mark) {
          window.performance.mark('lcp-image-loaded');
        }
      };
      
      // If image already loaded (from cache), add loaded class immediately
      if (img.complete) {
        img.classList.add('loaded');
        if (isAboveTheFold && window.performance && window.performance.mark) {
          window.performance.mark('lcp-image-loaded-from-cache');
        }
      }
      
      // Use Intersection Observer for better lazy loading of non-above-fold images
      if (!isAboveTheFold) {
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                // Preload the image when it's about to enter viewport
                const fullSizeImg = new Image();
                fullSizeImg.src = img.src;
                // Stop observing once it's in view
                observer.unobserve(img);
              }
            });
          },
          { 
            rootMargin: intersectionMargin,
            threshold: lazyLoadThreshold
          }
        );
        
        observer.observe(img);
      }
    }
  </script>
)}