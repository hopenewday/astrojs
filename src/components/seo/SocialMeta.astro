---
/**
 * SocialMeta.astro - Social media metadata component
 * 
 * This component generates Open Graph and Twitter Card metadata
 * for optimal social media sharing appearance.
 */

interface Props {
  title: string;
  description: string;
  url?: string;
  image?: string;
  type?: 'website' | 'article' | 'profile' | 'book' | 'music' | 'video';
  siteName?: string;
  locale?: string;
  twitterCard?: 'summary' | 'summary_large_image' | 'app' | 'player';
  twitterSite?: string;
  twitterCreator?: string;
  articlePublishedTime?: Date;
  articleModifiedTime?: Date;
  articleAuthor?: string;
  articleSection?: string;
  articleTags?: string[];
}

const {
  title,
  description,
  url = Astro.url.href,
  image = '/images/default-og.jpg',
  type = 'website',
  siteName = 'ChakrirChain',
  locale = 'en_US',
  twitterCard = 'summary_large_image',
  twitterSite = '@chakrirchain',
  twitterCreator = '@chakrirchain',
  articlePublishedTime,
  articleModifiedTime,
  articleAuthor,
  articleSection,
  articleTags = [],
} = Astro.props;

// Ensure image URLs are absolute
const ogImageUrl = new URL(image, Astro.site).toString();
---

<!-- Open Graph / Facebook -->
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:url" content={url} />
<meta property="og:image" content={ogImageUrl} />
<meta property="og:type" content={type} />
<meta property="og:site_name" content={siteName} />
<meta property="og:locale" content={locale} />

<!-- Article specific Open Graph tags -->
{type === 'article' && articlePublishedTime && (
  <meta property="article:published_time" content={articlePublishedTime.toISOString()} />
)}
{type === 'article' && articleModifiedTime && (
  <meta property="article:modified_time" content={articleModifiedTime.toISOString()} />
)}
{type === 'article' && articleAuthor && (
  <meta property="article:author" content={articleAuthor} />
)}
{type === 'article' && articleSection && (
  <meta property="article:section" content={articleSection} />
)}
{type === 'article' && articleTags.map(tag => (
  <meta property="article:tag" content={tag} />
))}

<!-- Twitter Card -->
<meta name="twitter:card" content={twitterCard} />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={ogImageUrl} />
<meta name="twitter:site" content={twitterSite} />
<meta name="twitter:creator" content={twitterCreator} />