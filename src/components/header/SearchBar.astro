---
// SearchBar.astro - Search component with autocomplete and recent searches
---

<div class="search-wrapper">
  <button
    type="button"
    id="search-toggle"
    class="search-toggle"
    aria-label="Toggle search"
    aria-expanded="false"
    aria-controls="search-container"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="20"
      height="20"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <circle cx="11" cy="11" r="8"></circle>
      <path d="m21 21-4.3-4.3"></path>
    </svg>
  </button>

  <div id="search-container" class="search-container" hidden>
    <div class="search-inner">
      <form
        role="search"
        class="search-form"
        id="search-form"
        onsubmit="return false;"
      >
        <label for="search-input" class="sr-only">Search articles</label>
        <input
          type="search"
          id="search-input"
          name="q"
          placeholder="Search articles..."
          autocomplete="off"
          aria-autocomplete="list"
          aria-controls="search-results"
          aria-expanded="false"
        />
        <button type="submit" aria-label="Search">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <circle cx="11" cy="11" r="8"></circle>
            <path d="m21 21-4.3-4.3"></path>
          </svg>
        </button>
      </form>

      <!-- Search Results -->
      <div id="search-results" class="search-results" hidden>
        <div class="results-container"></div>
      </div>

      <!-- Recent Searches -->
      <div id="recent-searches" class="recent-searches">
        <h3>Recent Searches</h3>
        <ul class="recent-searches-list"></ul>
      </div>
    </div>
  </div>
</div>

<style>
  .search-wrapper {
    position: relative;
  }

  .search-toggle {
    padding: var(--spacing-2);
    background: none;
    border: none;
    color: var(--color-text);
    cursor: pointer;
    transition: var(--transition-colors);
  }

  .search-toggle:hover {
    color: var(--color-primary);
  }

  .search-container {
    position: fixed;
    top: 4rem;
    left: 0;
    right: 0;
    background-color: var(--color-background);
    border-bottom: 1px solid var(--color-border);
    padding: var(--spacing-4);
    transform: translateY(-100%);
    opacity: 0;
    transition: var(--transition-all);
  }

  .search-container.active {
    transform: translateY(0);
    opacity: 1;
  }

  .search-inner {
    max-width: 36rem;
    margin: 0 auto;
  }

  .search-form {
    position: relative;
    margin-bottom: var(--spacing-4);
  }

  .search-form input {
    width: 100%;
    padding: var(--spacing-3) var(--spacing-4);
    padding-right: var(--spacing-12);
    border: 2px solid var(--color-border);
    border-radius: 0.375rem;
    background-color: var(--color-background);
    color: var(--color-text);
    font-size: 1rem;
  }

  .search-form input:focus {
    outline: none;
    border-color: var(--color-primary);
  }

  .search-form button {
    position: absolute;
    right: var(--spacing-2);
    top: 50%;
    transform: translateY(-50%);
    padding: var(--spacing-2);
    background: none;
    border: none;
    color: var(--color-text-light);
    cursor: pointer;
    transition: var(--transition-colors);
  }

  .search-form button:hover {
    color: var(--color-primary);
  }

  .search-results {
    border-top: 1px solid var(--color-border);
    padding-top: var(--spacing-4);
  }

  .results-container {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-2);
  }

  .result-item {
    padding: var(--spacing-2);
    border-radius: 0.375rem;
    transition: var(--transition-colors);
    text-decoration: none;
    color: var(--color-text);
  }

  .result-item:hover {
    background-color: var(--color-background-hover);
  }

  .result-title {
    font-weight: 500;
    margin-bottom: var(--spacing-1);
  }

  .result-excerpt {
    font-size: 0.875rem;
    color: var(--color-text-light);
  }

  .recent-searches {
    border-top: 1px solid var(--color-border);
    padding-top: var(--spacing-4);
  }

  .recent-searches h3 {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--color-text-light);
    margin: 0 0 var(--spacing-2);
  }

  .recent-searches-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-2);
  }

  .recent-search-item {
    background-color: var(--color-background-alt);
    padding: var(--spacing-1) var(--spacing-2);
    border-radius: 9999px;
    font-size: 0.875rem;
    color: var(--color-text);
    cursor: pointer;
    transition: var(--transition-colors);
  }

  .recent-search-item:hover {
    background-color: var(--color-background-hover);
    color: var(--color-primary);
  }
</style>

<script>
  // Search functionality
  const searchToggle = document.getElementById('search-toggle');
  const searchContainer = document.getElementById('search-container');
  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const searchResults = document.getElementById('search-results');
  const recentSearchesList = document.querySelector('.recent-searches-list');

  if (searchToggle && searchContainer && searchInput && searchResults && recentSearchesList) {
    // Toggle search container
    searchToggle.addEventListener('click', () => {
      const isExpanded = searchToggle.getAttribute('aria-expanded') === 'true';
      searchToggle.setAttribute('aria-expanded', (!isExpanded).toString());
      searchContainer.classList.toggle('active');
      searchContainer.hidden = isExpanded;
      
      if (!isExpanded) {
        searchInput.focus();
        loadRecentSearches();
      }
    });

    // Close search on click outside
    document.addEventListener('click', (event) => {
      if (!searchContainer.contains(event.target as Node) && !searchToggle.contains(event.target as Node)) {
        searchToggle.setAttribute('aria-expanded', 'false');
        searchContainer.classList.remove('active');
        searchContainer.hidden = true;
      }
    });

    // Handle search input
    let debounceTimeout: number;
    searchInput.addEventListener('input', () => {
      clearTimeout(debounceTimeout);
      debounceTimeout = window.setTimeout(() => {
        const query = searchInput.value.trim();
        if (query.length >= 2) {
          performSearch(query);
        } else {
          searchResults.hidden = true;
        }
      }, 300);
    });

    // Load recent searches from localStorage
    function loadRecentSearches() {
      const recentSearches = JSON.parse(localStorage.getItem('recentSearches') || '[]');
      recentSearchesList.innerHTML = recentSearches
        .map((search: string) => `
          <li class="recent-search-item" role="button" tabindex="0">
            ${search}
          </li>
        `)
        .join('');

      // Add click handlers to recent search items
      document.querySelectorAll('.recent-search-item').forEach((item) => {
        item.addEventListener('click', () => {
          searchInput.value = item.textContent?.trim() || '';
          performSearch(searchInput.value);
        });
      });
    }

    // Save search to recent searches
    function saveRecentSearch(query: string) {
      const recentSearches = JSON.parse(localStorage.getItem('recentSearches') || '[]');
      if (!recentSearches.includes(query)) {
        recentSearches.unshift(query);
        if (recentSearches.length > 5) {
          recentSearches.pop();
        }
        localStorage.setItem('recentSearches', JSON.stringify(recentSearches));
        loadRecentSearches();
      }
    }

    // Perform search and update results
    async function performSearch(query: string) {
      try {
        // In a real application, this would be an API call
        const response = await fetch(`/api/search?q=${encodeURIComponent(query)}`);
        const results = await response.json();

        const resultsContainer = searchResults.querySelector('.results-container');
        if (resultsContainer) {
          resultsContainer.innerHTML = results.length
            ? results
                .map(
                  (result: any) => `
                    <a href="${result.url}" class="result-item">
                      <div class="result-title">${result.title}</div>
                      <div class="result-excerpt">${result.excerpt}</div>
                    </a>
                  `
                )
                .join('')
            : '<div class="no-results">No results found</div>';

          searchResults.hidden = false;
          saveRecentSearch(query);
        }
      } catch (error) {
        console.error('Search error:', error);
      }
    }

    // Initialize recent searches
    loadRecentSearches();
  }
</script>