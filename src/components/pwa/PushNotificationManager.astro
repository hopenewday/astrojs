---
/**
 * PushNotificationManager.astro - Component for managing push notifications
 * 
 * This component handles push notification subscriptions and provides
 * the user interface for requesting notification permissions.
 */

export interface Props {
  /** Additional class names */
  class?: string;
}

const { class: className = '' } = Astro.props;
---

<div class:list={['push-notification-container', className]}>
  <button id="push-notification-button" class="push-notification-button">
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"></path>
      <path d="M13.73 21a2 2 0 0 1-3.46 0"></path>
    </svg>
    <span>Enable Notifications</span>
  </button>
</div>

<style>
  .push-notification-container {
    display: flex;
    justify-content: center;
    margin: 1rem 0;
  }

  .push-notification-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background-color: var(--color-primary, #4f46e5);
    color: white;
    border: none;
    border-radius: 0.375rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .push-notification-button:hover {
    background-color: var(--color-primary-dark, #4338ca);
  }

  .push-notification-button svg {
    stroke: currentColor;
  }

  .push-notification-button.subscribed {
    background-color: #10b981;
  }

  .push-notification-button.subscribed:hover {
    background-color: #059669;
  }

  .push-notification-button.denied {
    background-color: #6b7280;
    cursor: not-allowed;
  }
</style>

<script>
  // Initialize the push notification functionality
  function initPushNotifications() {
    const button = document.getElementById('push-notification-button');
    
    // Check if push notifications are supported
    if (!('PushManager' in window)) {
      console.log('Push notifications are not supported in this browser');
      if (button) {
        button.textContent = 'Notifications Not Supported';
        button.classList.add('denied');
        button.disabled = true;
      }
      return;
    }

    // Check if service worker is registered
    if (!('serviceWorker' in navigator)) {
      console.log('Service workers are not supported in this browser');
      return;
    }

    // Update button state based on current permission
    updateButtonState();

    // Add click event listener to the button
    if (button) {
      button.addEventListener('click', requestNotificationPermission);
    }
  }

  // Update the button state based on notification permission
  async function updateButtonState() {
    const button = document.getElementById('push-notification-button');
    if (!button) return;

    // Check current permission state
    const permission = Notification.permission;

    if (permission === 'granted') {
      // Check if already subscribed
      const subscription = await getSubscription();
      if (subscription) {
        button.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"></path>
            <path d="M13.73 21a2 2 0 0 1-3.46 0"></path>
          </svg>
          <span>Notifications Enabled</span>
        `;
        button.classList.add('subscribed');
      } else {
        button.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"></path>
            <path d="M13.73 21a2 2 0 0 1-3.46 0"></path>
          </svg>
          <span>Subscribe to Notifications</span>
        `;
      }
    } else if (permission === 'denied') {
      button.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"></path>
          <path d="M13.73 21a2 2 0 0 1-3.46 0"></path>
        </svg>
        <span>Notifications Blocked</span>
      `;
      button.classList.add('denied');
      button.disabled = true;
    }
  }

  // Request notification permission and subscribe
  async function requestNotificationPermission() {
    try {
      const permission = await Notification.requestPermission();
      
      if (permission === 'granted') {
        await subscribeToPushNotifications();
      }
      
      updateButtonState();
    } catch (error) {
      console.error('Error requesting notification permission:', error);
    }
  }

  // Subscribe to push notifications
  async function subscribeToPushNotifications() {
    try {
      const registration = await navigator.serviceWorker.ready;
      
      // Get the server's public key
      const response = await fetch('/api/push/vapid-public-key');
      const vapidPublicKey = await response.text();
      
      // Convert the public key to Uint8Array
      const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);
      
      // Subscribe the user
      const subscription = await registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: convertedVapidKey
      });
      
      // Send the subscription to the server
      await sendSubscriptionToServer(subscription);
      
      console.log('Subscribed to push notifications');
      return subscription;
    } catch (error) {
      console.error('Failed to subscribe to push notifications:', error);
      return null;
    }
  }

  // Get the current push subscription
  async function getSubscription() {
    try {
      const registration = await navigator.serviceWorker.ready;
      return await registration.pushManager.getSubscription();
    } catch (error) {
      console.error('Error getting push subscription:', error);
      return null;
    }
  }

  // Send the subscription to the server
  async function sendSubscriptionToServer(subscription) {
    try {
      const response = await fetch('/api/push/subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(subscription),
      });
      
      if (!response.ok) {
        throw new Error('Failed to store subscription on server');
      }
      
      return await response.json();
    } catch (error) {
      console.error('Error sending subscription to server:', error);
      throw error;
    }
  }

  // Utility function to convert base64 to Uint8Array
  function urlBase64ToUint8Array(base64String) {
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding)
      .replace(/-/g, '+')
      .replace(/_/g, '/');
    
    const rawData = window.atob(base64);
    const outputArray = new Uint8Array(rawData.length);
    
    for (let i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i);
    }
    
    return outputArray;
  }

  // Initialize when the DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initPushNotifications);
  } else {
    initPushNotifications();
  }
</script>