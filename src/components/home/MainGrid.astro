---
// Main content grid for the homepage
import { getImageKitUrl } from "@utils/imageHelpers";
import { formatShortDate, calculateReadingTime, formatReadingTime } from "@utils/dateFormatters";

interface Article {
  id: string;
  title: string;
  slug: string;
  excerpt: string;
  image: string;
  category: {
    name: string;
    slug: string;
  };
  author: {
    name: string;
    slug: string;
    avatar?: string;
  };
  publishDate: Date;
  trending?: boolean;
  featured?: boolean;
  videoUrl?: string;
  content?: string;
}

interface Props {
  articles: Article[];
  featuredArticle?: Article;
  showAds?: boolean;
}

const { 
  articles = [], 
  featuredArticle = articles.find(article => article.featured) || articles[0],
  showAds = true 
} = Astro.props;

// Filter out the featured article from the regular articles list
const regularArticles = articles.filter(article => article.id !== featuredArticle?.id);

// Function to determine if we should show an ad after a specific index
const shouldShowAd = (index: number) => showAds && (index + 1) % 5 === 0;

// Function to get category color class
const getCategoryColorClass = (categorySlug: string) => {
  const categories = {
    tech: 'bg-tech text-white',
    culture: 'bg-culture text-white',
    science: 'bg-science text-white',
    business: 'bg-amber-500 text-white',
    politics: 'bg-red-500 text-white'
  };
  
  return categories[categorySlug as keyof typeof categories] || 'bg-gray-500 text-white';
};

// Function to get category gradient class for hero section
const getCategoryGradientClass = (categorySlug: string) => {
  const gradients = {
    tech: 'from-tech-dark to-tech/80',
    culture: 'from-culture-dark to-culture/80',
    science: 'from-science-dark to-science/80',
    business: 'from-amber-700 to-amber-500/80',
    politics: 'from-red-700 to-red-500/80'
  };
  
  return gradients[categorySlug as keyof typeof gradients] || 'from-gray-700 to-gray-500/80';
};

// Calculate reading time for featured article if content is available
const featuredReadingTime = featuredArticle?.content 
  ? formatReadingTime(calculateReadingTime(featuredArticle.content))
  : '5 mins read'; // Fallback
---

<section class="main-grid-container">
  <!-- Hero Section with Featured Article -->
  {featuredArticle && (
    <div class="hero-section">
      <a href={`/article/${featuredArticle.slug}`} class="hero-article">
        <div class="hero-image-container">
          <img 
            src={getImageKitUrl(featuredArticle.image, { width: 1200, quality: 80 })}
            alt={featuredArticle.title}
            width="1200"
            height="600"
            class="hero-image"
          />
          
          {/* Gradient Overlay */}
          <div class={`gradient-overlay bg-gradient-to-t ${getCategoryGradientClass(featuredArticle.category.slug)}`}></div>
          
          {/* Play Button for Video Content */}
          {featuredArticle.videoUrl && (
            <div class="play-button-container">
              <div class="play-button">
                <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="white" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <circle cx="12" cy="12" r="10" fill="rgba(0,0,0,0.5)" stroke="none"></circle>
                  <polygon points="10 8 16 12 10 16 10 8" fill="white" stroke="none"></polygon>
                </svg>
              </div>
            </div>
          )}
          
          <div class="hero-content">
            <div class="hero-meta">
              <span class={`category-badge ${getCategoryColorClass(featuredArticle.category.slug)}`}>
                {featuredArticle.category.name}
              </span>
              <span class="publish-date">
                {formatShortDate(featuredArticle.publishDate)}
              </span>
              <span class="reading-time">
                {featuredReadingTime}
              </span>
            </div>
            
            <h2 class="hero-title">{featuredArticle.title}</h2>
            <p class="hero-excerpt">{featuredArticle.excerpt}</p>
            
            <div class="hero-author">
              {featuredArticle.author.avatar && (
                <img 
                  src={getImageKitUrl(featuredArticle.author.avatar, { width: 40, height: 40 })}
                  alt={featuredArticle.author.name}
                  width="40"
                  height="40"
                  class="author-avatar"
                />
              )}
              <span class="author-name">By {featuredArticle.author.name}</span>
            </div>
          </div>
        </div>
      </a>
    </div>
  )}
  
  <!-- Articles Grid -->
  <div class="articles-grid">
    <!-- Mobile Interstitial Ad - Only shown on mobile devices -->
    {showAds && (
      <div class="mobile-interstitial-ad" data-ad-format="mobile">
        <div class="ad-container">
          <div class="ad-label">Advertisement</div>
          <div class="ad-content" id="mobile-interstitial-ad">
            <div class="ad-placeholder" aria-hidden="true">
              <div class="ad-placeholder-text">Ad</div>
              <div class="ad-placeholder-size">320Ã—480</div>
            </div>
          </div>
        </div>
      </div>
    )}
    {regularArticles.map((article, index) => (
      <>
        <article class="article-card">
          <a href={`/article/${article.slug}`} class="article-link">
            <div class="article-image-container">
              <img 
                src={getImageKitUrl(article.image, { width: 400, quality: 80 })}
                alt={article.title}
                width="400"
                height="225"
                loading="lazy"
                class="article-image"
              />
              
              {/* Category Badge */}
              <span class={`category-badge ${getCategoryColorClass(article.category.slug)}`}>
                {article.category.name}
              </span>
              
              {/* Trending Indicator */}
              {article.trending && (
                <span class="trending-badge" title="Trending Article">
                  ðŸ”¥ Trending
                </span>
              )}
              
              {/* Save Button */}
              <button 
                type="button" 
                class="save-button" 
                aria-label="Save article"
                data-article-id={article.id}
                data-article-title={article.title}
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="bookmark-icon">
                  <path d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"></path>
                </svg>
              </button>
            </div>
            
            <div class="article-content">
              <h3 class="article-title">{article.title}</h3>
              <p class="article-excerpt">{article.excerpt}</p>
              
              <div class="article-meta">
                <span class="publish-date">{formatShortDate(article.publishDate)}</span>
                <span class="reading-time">
                  {article.content 
                    ? formatReadingTime(calculateReadingTime(article.content))
                    : '3 mins read' // Fallback
                  }
                </span>
              </div>
            </div>
          </a>
        </article>
        
        {/* Ad Slot after every 5 articles */}
        {shouldShowAd(index) && (
          <div class="ad-slot" data-ad-format="leaderboard">
            <div class="ad-container">
              <div class="ad-label">Advertisement</div>
              <div class="ad-content" id={`leaderboard-ad-${Math.floor((index + 1) / 5)}`}>
                <div class="ad-placeholder" aria-hidden="true">
                  <div class="ad-placeholder-text">Ad</div>
                  <div class="ad-placeholder-size">728Ã—90</div>
                </div>
              </div>
            </div>
          </div>
        )}
      </>
    ))}
  </div>
  
  {/* Load More Button */}
  <div class="load-more-container">
    <button type="button" id="load-more-button" class="load-more-button">
      Load More Articles
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="m6 9 6 6 6-6"></path>
      </svg>
    </button>
  </div>
  
  {/* Sidebar Ad (Desktop Only) */}
  {showAds && (
    <div class="sidebar-ad-container">
      <div class="ad-slot" data-ad-format="sidebar">
        <div class="ad-container">
          <div class="ad-label">Advertisement</div>
          <div class="ad-content" id="sidebar-ad-main">
            <div class="ad-placeholder" aria-hidden="true">
              <div class="ad-placeholder-text">Ad</div>
              <div class="ad-placeholder-size">300Ã—600</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )}
</section>

<script>
  import { createScrollAnimation } from '../../utils/animations';
  
  // Initialize scroll animations when the DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    // Apply scroll animations to article cards
    createScrollAnimation('.article-card', {
      animationType: 'fade',
      start: 'top 80%',
      end: 'bottom 20%',
      markers: false,
      scrub: false
    });
    
    // Apply scroll animation to hero section
    createScrollAnimation('.hero-section', {
      animationType: 'fade',
      start: 'top bottom',
      end: 'bottom 80%',
      markers: false,
      scrub: false
    });
    
    // Save article functionality
    const saveButtons = document.querySelectorAll('.save-button');
    
    saveButtons.forEach(button => {
      // Check if article is already saved
      const articleId = button.getAttribute('data-article-id');
      const articleTitle = button.getAttribute('data-article-title');
      
      // Check if already saved
      const savedArticles = JSON.parse(localStorage.getItem('savedArticles') || '{}');
      if (savedArticles[articleId]) {
        button.classList.add('saved');
        button.setAttribute('aria-pressed', 'true');
      }
      
      button.addEventListener('click', (e) => {
        e.preventDefault(); // Prevent navigating to article
        e.stopPropagation(); // Prevent event bubbling
        
        const isSaved = button.classList.contains('saved');
        const savedArticles = JSON.parse(localStorage.getItem('savedArticles') || '{}');
        
        if (isSaved) {
          // Remove from saved
          delete savedArticles[articleId];
          button.classList.remove('saved');
          button.setAttribute('aria-pressed', 'false');
        } else {
          // Add to saved
          savedArticles[articleId] = {
            title: articleTitle,
            url: `/article/${button.closest('.article-link').getAttribute('href')}`,
            savedAt: new Date().toISOString()
          };
          button.classList.add('saved');
          button.setAttribute('aria-pressed', 'true');
        }
        
        localStorage.setItem('savedArticles', JSON.stringify(savedArticles));
      });
    });
    
    // Load more functionality with Intersection Observer
    const loadMoreButton = document.getElementById('load-more-button');
    let currentPage = 1;
    let isLoading = false;
    let hasMoreArticles = true;
    
    if (loadMoreButton) {
      // Create observer for infinite scroll
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting && !isLoading && hasMoreArticles) {
            loadMoreArticles();
          }
        });
      }, { threshold: 0.5 });
      
      // Start observing the button
      observer.observe(loadMoreButton);
      
      // Manual click handler
      loadMoreButton.addEventListener('click', () => {
        if (!isLoading && hasMoreArticles) {
          loadMoreArticles();
        }
      });
      
      // Function to load more articles
      async function loadMoreArticles() {
        isLoading = true;
        loadMoreButton.textContent = 'Loading...';
        loadMoreButton.disabled = true;
        
        try {
          // Fetch more articles from the API
          const response = await fetch(`/api/articles?page=${currentPage + 1}&limit=6`);
          
          if (!response.ok) {
            throw new Error(`Failed to fetch articles: ${response.status}`);
          }
          
          const data = await response.json();
          
          if (data.articles && data.articles.length > 0) {
            // Append new articles to the grid
            appendArticlesToGrid(data.articles);
            currentPage++;
            
            // Check if there are more articles to load
            if (data.hasMore === false || data.articles.length < 6) {
              hasMoreArticles = false;
              loadMoreButton.textContent = 'No More Articles';
              loadMoreButton.disabled = true;
              observer.disconnect();
            } else {
              loadMoreButton.textContent = 'Load More Articles';
              loadMoreButton.disabled = false;
            }
            
            // Dispatch event for any listeners
            document.dispatchEvent(new CustomEvent('articlesLoaded', { 
              detail: { success: true, count: data.articles.length } 
            }));
          } else {
            // No more articles
            hasMoreArticles = false;
            loadMoreButton.textContent = 'No More Articles';
            loadMoreButton.disabled = true;
            observer.disconnect();
          }
        } catch (error) {
          console.error('Error loading more articles:', error);
          loadMoreButton.textContent = 'Try Again';
          loadMoreButton.disabled = false;
          
          // Dispatch error event
          document.dispatchEvent(new CustomEvent('articlesLoaded', { 
            detail: { success: false, error: error.message } 
          }));
        }
        
        isLoading = false;
      }
      
      // Function to append articles to the grid
      function appendArticlesToGrid(articles) {
        const articlesGrid = document.querySelector('.articles-grid');
        
        if (!articlesGrid) return;
        
        articles.forEach((article, index) => {
          // Create article element
          const articleElement = document.createElement('article');
          articleElement.className = 'article-card';
          
          // Format date
          const publishDate = new Date(article.publishDate);
          const formattedDate = new Intl.DateTimeFormat('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
          }).format(publishDate);
          
          // Calculate reading time
          const readingTime = article.content 
            ? calculateReadingTimeClient(article.content)
            : '3 mins read';
          
          // Get category color class
          const categoryColorClass = getCategoryColorClassClient(article.category.slug);
          
          // Generate article HTML
          articleElement.innerHTML = `
            <a href="/article/${article.slug}" class="article-link">
              <div class="article-image-container">
                <img 
                  src="${getImageKitUrlClient(article.image, { width: 400, quality: 80 })}"
                  alt="${article.title}"
                  width="400"
                  height="225"
                  loading="lazy"
                  class="article-image"
                />
                
                <span class="category-badge ${categoryColorClass}">
                  ${article.category.name}
                </span>
                
                ${article.trending ? `
                  <span class="trending-badge" title="Trending Article">
                    ðŸ”¥ Trending
                  </span>
                ` : ''}
                
                <button 
                  type="button" 
                  class="save-button" 
                  aria-label="Save article"
                  data-article-id="${article.id}"
                  data-article-title="${article.title}"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="bookmark-icon">
                    <path d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"></path>
                  </svg>
                </button>
              </div>
              
              <div class="article-content">
                <h3 class="article-title">${article.title}</h3>
                <p class="article-excerpt">${article.excerpt}</p>
                
                <div class="article-meta">
                  <span class="publish-date">${formattedDate}</span>
                  <span class="reading-time">${readingTime}</span>
                </div>
              </div>
            </a>
          `;
          
          // Add to grid
          articlesGrid.appendChild(articleElement);
          
          // Add event listener to save button
          const saveButton = articleElement.querySelector('.save-button');
          if (saveButton) {
            // Check if already saved
            const articleId = saveButton.getAttribute('data-article-id');
            const savedArticles = JSON.parse(localStorage.getItem('savedArticles') || '{}');
            
            if (savedArticles[articleId]) {
              saveButton.classList.add('saved');
              saveButton.setAttribute('aria-pressed', 'true');
            }
            
            saveButton.addEventListener('click', (e) => {
              e.preventDefault();
              e.stopPropagation();
              
              const isSaved = saveButton.classList.contains('saved');
              const articleId = saveButton.getAttribute('data-article-id');
              const articleTitle = saveButton.getAttribute('data-article-title');
              const savedArticles = JSON.parse(localStorage.getItem('savedArticles') || '{}');
              
              if (isSaved) {
                delete savedArticles[articleId];
                saveButton.classList.remove('saved');
                saveButton.setAttribute('aria-pressed', 'false');
              } else {
                savedArticles[articleId] = {
                  title: articleTitle,
                  url: `/article/${article.slug}`,
                  savedAt: new Date().toISOString()
                };
                saveButton.classList.add('saved');
                saveButton.setAttribute('aria-pressed', 'true');
              }
              
              localStorage.setItem('savedArticles', JSON.stringify(savedArticles));
            });
          }
          
          // Add ad after every 5 articles
          if ((index + 1) % 5 === 0) {
            const adElement = document.createElement('div');
            adElement.className = 'ad-slot';
            adElement.setAttribute('data-ad-format', 'leaderboard');
            adElement.innerHTML = `
              <div class="ad-container">
                <div class="ad-label">Advertisement</div>
                <div class="ad-content" id="leaderboard-ad-${Math.floor((index + 1) / 5)}">
                  <div class="ad-placeholder" aria-hidden="true">
                    <div class="ad-placeholder-text">Ad</div>
                    <div class="ad-placeholder-size">728Ã—90</div>
                  </div>
                </div>
              </div>
            `;
            
            articlesGrid.appendChild(adElement);
            
            // Initialize ad loading
            initializeAdLoading(adElement.querySelector('.ad-slot'));
          }
        });
      }
      
      // Helper functions for client-side use
      function getImageKitUrlClient(src, options = {}) {
        // Simple client-side version of the server utility
        if (!src.includes('ik.imagekit.io') && !src.startsWith('/')) {
          return src;
        }
        
        const baseUrl = src.startsWith('/') 
          ? `${window.ENV?.IMAGEKIT_URL || ''}${src}` 
          : src;
        
        const params = new URLSearchParams();
        
        if (options.width) params.append('tr', `w-${options.width}`);
        if (options.height) params.append('tr', `h-${options.height}`);
        if (options.quality) params.append('tr', `q-${options.quality}`);
        
        const paramsString = params.toString();
        if (paramsString) {
          return `${baseUrl}?${paramsString}`;
        }
        
        return baseUrl;
      }
      
      function calculateReadingTimeClient(content) {
        const wordsPerMinute = 200;
        const wordCount = content.trim().split(/\s+/).length;
        const minutes = Math.ceil(wordCount / wordsPerMinute);
        
        return minutes === 1 ? '1 min read' : `${minutes} mins read`;
      }
      
      function getCategoryColorClassClient(categorySlug) {
        const categories = {
          tech: 'bg-tech text-white',
          culture: 'bg-culture text-white',
          science: 'bg-science text-white',
          business: 'bg-amber-500 text-white',
          politics: 'bg-red-500 text-white'
        };
        
        return categories[categorySlug] || 'bg-gray-500 text-white';
      }
    }
    
    // Ad lazy loading functionality
    const adSlots = document.querySelectorAll('.ad-slot');
    
    if (adSlots.length > 0) {
      initializeAdLoading(adSlots);
    }
    
    function initializeAdLoading(slots) {
      const elements = slots instanceof NodeList ? slots : [slots];
      
      // Create intersection observer for lazy loading ads
      const adObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const adSlot = entry.target;
            const adContent = adSlot.querySelector('.ad-content');
            const adFormat = adSlot.getAttribute('data-ad-format');
            
            if (adContent && !adContent.dataset.loaded) {
              // Mark as loaded to prevent duplicate loading
              adContent.dataset.loaded = 'true';
              
              // Remove placeholder
              const placeholder = adContent.querySelector('.ad-placeholder');
              if (placeholder) {
                placeholder.style.display = 'none';
              }
              
              // Load the ad based on format
              loadAd(adContent, adFormat);
              
              // Stop observing this ad slot
              adObserver.unobserve(adSlot);
            }
          }
        });
      }, {
        threshold: 0.1,
        rootMargin: '200px'
      });
      
      // Start observing all ad slots
      elements.forEach(adSlot => {
        adObserver.observe(adSlot);
      });
    }
    
    // Function to load the appropriate ad based on format
    function loadAd(container, format) {
      // Create a loading indicator with Lottie animation
      const loader = document.createElement('div');
      loader.className = 'ad-loading';
      
      // Create Lottie container
      const lottieContainer = document.createElement('div');
      const lottieId = `ad-lottie-${Math.random().toString(36).substring(2, 11)}`;
      lottieContainer.id = lottieId;
      lottieContainer.className = 'ad-loading-animation';
      loader.appendChild(lottieContainer);
      container.appendChild(loader);
      
      // Initialize Lottie animation
      import('../../utils/animations.ts').then(module => {
      // Initialize animations
      module.initAnimations();
      
      // Apply scroll animations to content sections
      import('../../utils/scrollAnimations.ts').then(scrollModule => {
        scrollModule.initContentSectionAnimations();
      }).catch(error => {
        console.error('Failed to load scroll animations:', error);
      });
        const { initLottieAnimation } = module;
        initLottieAnimation(lottieId, 'https://assets9.lottiefiles.com/packages/lf20_usmfx6bp.json', {
          loop: true,
          autoplay: true,
          renderer: 'svg',
          speed: 1
        });
      }).catch(error => {
        console.error('Failed to load Lottie animation:', error);
        // Fallback to simple spinner
        lottieContainer.innerHTML = '<div class="ad-loading-spinner"></div>';
      });
      
      // Load the appropriate ad based on format
      setTimeout(() => {
        // Remove loading indicator
        loader.remove();
        
        // Create ad content
        const adElement = document.createElement('div');
        adElement.className = 'ad-creative';
        
        // Set different content based on ad format
        if (format === 'leaderboard') {
          adElement.style.width = '728px';
          adElement.style.height = '90px';
          adElement.style.backgroundColor = '#f0f0f0';
          adElement.innerHTML = '<div class="demo-ad">Leaderboard Ad (728Ã—90)</div>';
          
          // In a production environment, this would be replaced with actual ad code
          // Example with Google AdSense:
          // const adScript = document.createElement('script');
          // adScript.async = true;
          // adScript.src = 'https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-XXXXXXXXXXXXXXXX';
          // document.head.appendChild(adScript);
          // 
          // const adInsElement = document.createElement('ins');
          // adInsElement.className = 'adsbygoogle';
          // adInsElement.style.display = 'block';
          // adInsElement.setAttribute('data-ad-client', 'ca-pub-XXXXXXXXXXXXXXXX');
          // adInsElement.setAttribute('data-ad-slot', 'XXXXXXXXXX');
          // adInsElement.setAttribute('data-ad-format', 'auto');
          // adInsElement.setAttribute('data-full-width-responsive', 'true');
          // adElement.appendChild(adInsElement);
          // 
          // (adsbygoogle = window.adsbygoogle || []).push({});
        } else if (format === 'sidebar') {
          adElement.style.width = '300px';
          adElement.style.height = '600px';
          adElement.style.backgroundColor = '#f0f0f0';
          adElement.innerHTML = '<div class="demo-ad">Sidebar Ad (300Ã—600)</div>';
          
          // Production implementation would go here
        } else if (format === 'mobile') {
          adElement.style.width = '320px';
          adElement.style.height = '100px';
          adElement.style.backgroundColor = '#f0f0f0';
          adElement.innerHTML = '<div class="demo-ad">Mobile Ad (320Ã—100)</div>';
          
          // Production implementation would go here
        }
        
        // Add the ad to the container
        container.appendChild(adElement);
        
        // Add privacy-friendly controls
        const privacyControl = document.createElement('button');
        privacyControl.className = 'ad-privacy-control';
        privacyControl.setAttribute('aria-label', 'Hide advertisement');
        privacyControl.innerHTML = 'Ã—';
        privacyControl.addEventListener('click', () => {
          // Find the closest ad slot container
          const adSlot = container.closest('.ad-slot') || container.closest('.mobile-interstitial-ad');
          if (adSlot) {
            adSlot.style.display = 'none';
            
            // Store preference in localStorage with expiration
            const preferences = JSON.parse(localStorage.getItem('adPreferences') || '{}');
            preferences.hideAds = true;
            preferences.timestamp = Date.now();
            localStorage.setItem('adPreferences', JSON.stringify(preferences));
            
            // Dispatch event for analytics
            document.dispatchEvent(new CustomEvent('adDismissed', { 
              detail: { format, reason: 'user_closed' } 
            }));
          }
        });
        
        container.appendChild(privacyControl);
        
        // Track impression for analytics
        if ('IntersectionObserver' in window) {
          const impressionObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                // Record impression
                document.dispatchEvent(new CustomEvent('adImpression', { 
                  detail: { format, viewable: true } 
                }));
                
                // Stop observing after first impression
                impressionObserver.disconnect();
              }
            });
          }, { threshold: 0.5 }); // Consider viewed when 50% visible
          
          impressionObserver.observe(adElement);
        }
      }, 1000);
    }
    
    // Check user preference for ads
    const adPreferences = JSON.parse(localStorage.getItem('adPreferences') || '{}');
    const hideAds = adPreferences.hideAds === true;
    const preferencesExpired = adPreferences.timestamp && (Date.now() - adPreferences.timestamp > 7 * 24 * 60 * 60 * 1000); // 7 days
    
    if (hideAds && !preferencesExpired) {
      document.querySelectorAll('.ad-slot, .mobile-interstitial-ad').forEach(slot => {
        slot.style.display = 'none';
      });
    } else if (preferencesExpired && adPreferences.timestamp) {
      // Reset preferences after expiration
      localStorage.removeItem('adPreferences');
    }
  });
</script>

<style>
  /* Main Grid Container */
  .main-grid-container {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
    max-width: 1280px;
    margin: 0 auto;
    padding: 2rem 1rem;
    position: relative;
  }
  
  @media (min-width: 1024px) {
    .main-grid-container {
      grid-template-columns: 1fr 300px;
      gap: 3rem;
    }
  }
  
  /* Hero Section */
  .hero-section {
    grid-column: 1 / -1;
    margin-bottom: 1rem;
  }
  
  .hero-article {
    display: block;
    text-decoration: none;
    color: inherit;
    border-radius: 0.5rem;
    overflow: hidden;
    position: relative;
    height: 100%;
  }
  
  .hero-image-container {
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    overflow: hidden;
    border-radius: 0.5rem;
  }
  
  @media (min-width: 768px) {
    .hero-image-container {
      padding-bottom: 50%; /* Slightly shorter on larger screens */
    }
  }
  
  .hero-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }
  
  .hero-article:hover .hero-image {
    transform: scale(1.05);
  }
  
  .gradient-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
  }
  
  .play-button-container {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 2;
  }
  
  .play-button {
    width: 80px;
    height: 80px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    background-color: rgba(0, 0, 0, 0.3);
    transition: background-color 0.2s;
  }
  
  .hero-article:hover .play-button {
    background-color: rgba(0, 0, 0, 0.5);
  }
  
  .hero-content {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    padding: 2rem;
    z-index: 2;
    color: white;
  }
  
  .hero-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
    flex-wrap: wrap;
  }
  
  .category-badge {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
  }
  
  .publish-date,
  .reading-time {
    font-size: 0.875rem;
    opacity: 0.9;
  }
  
  .hero-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin: 0 0 0.5rem;
    line-height: 1.3;
  }
  
  @media (min-width: 768px) {
    .hero-title {
      font-size: 2rem;
    }
  }
  
  @media (min-width: 1024px) {
    .hero-title {
      font-size: 2.5rem;
      max-width: 80%;
    }
  }
  
  .hero-excerpt {
    font-size: 1rem;
    margin: 0 0 1.5rem;
    opacity: 0.9;
    display: none;
  }
  
  @media (min-width: 768px) {
    .hero-excerpt {
      display: block;
      max-width: 80%;
    }
  }
  
  .hero-author {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .author-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid white;
  }
  
  .author-name {
    font-size: 0.875rem;
    font-weight: 500;
  }
  
  /* Articles Grid */
  .articles-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
    grid-column: 1;
  }
  
  @media (min-width: 640px) {
    .articles-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (min-width: 1024px) {
    .articles-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (min-width: 1280px) {
    .articles-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  
  /* Article Card */
  .article-card {
    border-radius: 0.5rem;
    overflow: hidden;
    background-color: white;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    transition: transform 0.2s, box-shadow 0.2s;
  }
  
  .article-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }
  
  .article-link {
    display: block;
    text-decoration: none;
    color: inherit;
  }
  
  .article-image-container {
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    overflow: hidden;
  }
  
  .article-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }
  
  .article-card:hover .article-image {
    transform: scale(1.05);
  }
  
  .article-image-container .category-badge {
    position: absolute;
    top: 1rem;
    left: 1rem;
    z-index: 1;
  }
  
  .trending-badge {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    font-weight: 600;
    z-index: 1;
  }
  
  .save-button {
    position: absolute;
    bottom: 1rem;
    right: 1rem;
    background-color: white;
    border: none;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    z-index: 1;
    transition: background-color 0.2s;
  }
  
  .save-button:hover {
    background-color: #f3f4f6;
  }
  
  .save-button.saved .bookmark-icon {
    fill: #3b82f6;
    stroke: #3b82f6;
  }
  
  .article-content {
    padding: 1.5rem;
  }
  
  .article-title {
    font-size: 1.25rem;
    font-weight: 700;
    margin: 0 0 0.75rem;
    line-height: 1.4;
  }
  
  .article-excerpt {
    font-size: 0.875rem;
    color: #4b5563;
    margin: 0 0 1rem;
    line-height: 1.5;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .article-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    font-size: 0.75rem;
    color: #6b7280;
  }
  
  /* Ad Slots */
  .ad-slot {
    grid-column: 1 / -1;
    background-color: #f9fafb;
    border-radius: 0.5rem;
    padding: 1rem;
    text-align: center;
    margin: 1rem 0;
  }
  
  .sidebar-ad-container {
    display: none;
    position: sticky;
    top: 2rem;
    grid-column: 2;
    grid-row: 1 / span 2;
    height: fit-content;
  }
  
  @media (min-width: 1024px) {
    .sidebar-ad-container {
      display: block;
    }
  }
  
  .ad-label {
    font-size: 0.75rem;
    color: #6b7280;
    text-transform: uppercase;
    margin-bottom: 0.5rem;
  }
  
  .ad-container {
    width: 100%;
    height: 90px; /* For leaderboard */
  }
  
  /* Mobile Interstitial Ad */
  .mobile-interstitial-ad {
    display: none; /* Hidden by default */
    grid-column: 1 / -1;
    margin: 1rem 0;
    text-align: center;
  }
  
  @media (max-width: 767px) {
    .mobile-interstitial-ad {
      display: block; /* Only show on mobile */
    }
    
    /* Hide leaderboard ads on mobile */
    .ad-slot[data-ad-format="leaderboard"] {
      display: none;
    }
  }
  
  /* Hide sidebar ads on mobile and tablet */
  @media (max-width: 1023px) {
    .sidebar-ad-container {
      display: none;
    }
  }
  
  .sidebar-ad .ad-container {
    height: 600px;
  }
  
  .ad-placeholder {
    background-color: #f3f4f6;
    border: 1px dashed #d1d5db;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    font-size: 0.875rem;
    color: #6b7280;
    text-align: center;
    width: 100%;
    height: 100%;
    min-height: 90px;
  }
  
  .ad-placeholder-text {
    font-weight: 500;
    margin-bottom: 0.5rem;
  }
  
  .ad-placeholder-size {
    font-size: 0.75rem;
    opacity: 0.7;
  }
  
  .ad-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    min-height: 90px;
  }
  
  .ad-loading-spinner {
    width: 24px;
    height: 24px;
    border: 2px solid #e5e7eb;
    border-top-color: #3b82f6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  
  .ad-creative {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    position: relative;
  }
  
  .demo-ad {
    font-size: 0.875rem;
    color: #4b5563;
    font-weight: 500;
  }
  
  .ad-privacy-control {
    position: absolute;
    top: 0;
    right: 0;
    width: 24px;
    height: 24px;
    background-color: rgba(0, 0, 0, 0.1);
    border: none;
    border-radius: 50%;
    color: #4b5563;
    font-size: 16px;
    line-height: 1;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.2s ease;
  }
  
  .ad-creative:hover .ad-privacy-control {
    opacity: 1;
  }
  
  /* Load More Button */
  .load-more-container {
    grid-column: 1;
    text-align: center;
    margin: 2rem 0;
  }
  
  .load-more-button {
    background-color: white;
    border: 1px solid #e5e7eb;
    color: #1f2937;
    padding: 0.75rem 1.5rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: background-color 0.2s, border-color 0.2s;
  }
  
  .load-more-button:hover {
    background-color: #f9fafb;
    border-color: #d1d5db;
  }
  
  .load-more-button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }
  
  /* Skeleton Loading State */
  .skeleton {
    background: linear-gradient(90deg, #f3f4f6 0%, #e5e7eb 50%, #f3f4f6 100%);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
    border-radius: 0.25rem;
  }
  
  @keyframes shimmer {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }
  
  /* Dark Mode Styles */
  :global(.dark) .article-card {
    background-color: #1f2937;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.2), 0 2px 4px -1px rgba(0, 0, 0, 0.1);
  }
  
  :global(.dark) .article-excerpt {
    color: #d1d5db;
  }
  
  :global(.dark) .article-meta {
    color: #9ca3af;
  }
  
  :global(.dark) .ad-slot,
  :global(.dark) .sidebar-ad {
    background-color: #111827;
  }
  
  :global(.dark) .ad-label {
    color: #9ca3af;
  }
  
  :global(.dark) .ad-placeholder {
    background-color: #374151;
    color: #9ca3af;
  }
  
  :global(.dark) .load-more-button {
    background-color: #1f2937;
    border-color: #374151;
    color: #e5e7eb;
  }
  
  :global(.dark) .load-more-button:hover {
    background-color: #111827;
    border-color: #4b5563;
  }
  
  :global(.dark) .save-button {
    background-color: #1f2937;
  }
  
  :global(.dark) .save-button:hover {
    background-color: #111827;
  }
  
  :global(.dark) .skeleton {
    background: linear-gradient(90deg, #1f2937 0%, #111827 50%, #1f2937 100%);
  }
</style>